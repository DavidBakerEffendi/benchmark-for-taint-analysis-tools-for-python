{
    "fileName": "abstract_factory_1_sanitized.py",
    "day": "2022-10-09",
    "findings": [
        {
            "source": {
                "statement": "command = request.view_args.get('command')",
                "methodName": "factory_route",
                "className": "",
                "lineNo": 17,
                "targetName": "get",
                "targetNo": 1
            },
            "sink": {
                "statement": "eval(a.get_command_sanitized())",
                "methodName": "factory_route",
                "className": "",
                "lineNo": 20,
                "targetName": "eval",
                "targetNo": 1
            },
            "ID": 3,
            "description": "The abstract factory design pattern is a way to encapsulate a group of objects with a common theme without the concrete class. In this test case, the objects are initialized at runtime and returned by the function factory(). The get_command() function in ClassA returns the command field as it is set, i.e., the taint is propagated. The get_command() function of ClassB, on the other hand, returns a constant string, i.e., breaking any taint flow. Which object is created at runtime will be difficult for static analysis to determine. This test includes sanitization.",
            "isNegative": true,
            "intermediateFlows": [],
            "attributes": {}
        }
    ]
}
